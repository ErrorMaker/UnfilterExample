using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Net.WebSockets;
using System.Net;
using Eavesdrop;
using System.Text.RegularExpressions;
using System.Collections;
using System.Reflection;

namespace SocketTest
{
    class Program
    {
        static void Main(string[] args)
        {
            DoStuff();
            Console.ReadLine();
        }

        public static int Count = 0;

        private static async void DoStuff()
        {
            RestClient Client = new RestClient("https://sso.pokemon.com");
            Client.CookieContainer = new CookieContainer();
            Client.UserAgent = "Chrome";

            RestRequest getLogin = new RestRequest("/sso/login?locale=en&service=https://club.pokemon.com/us/pokemon-trainer-club/caslogin");
            var getLoginResponse = await Client.ExecuteGetTaskAsync(getLogin);

            string LT = Regex.Match(getLoginResponse.Content, "value=\"LT-(.*?)\" />").Groups[1].Value;
            Console.WriteLine(LT);
            string execution = Regex.Match(getLoginResponse.Content, "name=\"execution\" value=\"(.*?)\" />").Groups[1].Value;

            RestRequest login = new RestRequest("/sso/login?locale=en&service=https://club.pokemon.com/us/pokemon-trainer-club/caslogin");
            login.AddParameter("lt", "LT-" + LT);
            login.AddParameter("execution", execution);
            login.AddParameter("_eventId", "submit");
            login.AddParameter("username", "zzuser3");
            login.AddParameter("password", "wonyidvim1");
            login.AddParameter("Login", "Sign In");

            var loginResponse = await Client.ExecutePostTaskAsync(login);

            bool loggedIn = loginResponse.Content.Contains("zzuser3");

            if (loggedIn)
            {
                Console.WriteLine("Logged in");
                Client.BaseUrl = new Uri("https://club.pokemon.com");
                var getCookies = await Client.ExecuteGetTaskAsync(new RestRequest("/us/pokemon-trainer-club/my-password"));

                string csrfToken = Regex.Match(getCookies.Content, "window.token = \"(.*)\";").Groups[1].Value;
                Cookie c = new Cookie();
                c.Path = "/";
                c.Domain = "club.pokemon.com";
                c.Expires = DateTime.Now.AddYears(1);
                c.Name = "csrftoken";
                c.Value = csrfToken;
                c.HttpOnly = false;
                Client.CookieContainer.Add(c);

                RestRequest setPassword = new RestRequest("/us/pokemon-trainer-club/my-password");
                setPassword.AddParameter("csrfmiddlewaretoken", csrfToken);
                setPassword.AddParameter("currentpassword", "wonyidvim1");
                setPassword.AddParameter("password", "wonyidvim2");
                setPassword.AddParameter("confirm_password", "wonyidvim2");

                var setPasswordResponse = await Client.ExecutePostTaskAsync(setPassword);
            }
        }

        public static CookieCollection GetAllCookies(CookieContainer cookieJar)
        {
            CookieCollection cookieCollection = new CookieCollection();

            Hashtable table = (Hashtable)cookieJar.GetType().InvokeMember("m_domainTable",
                                                                            BindingFlags.NonPublic |
                                                                            BindingFlags.GetField |
                                                                            BindingFlags.Instance,
                                                                            null,
                                                                            cookieJar,
                                                                            new object[] { });

            foreach (var tableKey in table.Keys)
            {
                String str_tableKey = (string)tableKey;

                if (str_tableKey[0] == '.')
                {
                    str_tableKey = str_tableKey.Substring(1);
                }

                SortedList list = (SortedList)table[tableKey].GetType().InvokeMember("m_list",
                                                                            BindingFlags.NonPublic |
                                                                            BindingFlags.GetField |
                                                                            BindingFlags.Instance,
                                                                            null,
                                                                            table[tableKey],
                                                                            new object[] { });

                foreach (var listKey in list.Keys)
                {
                    String url = "https://" + str_tableKey + (string)listKey;
                    cookieCollection.Add(cookieJar.GetCookies(new Uri(url)));
                }
            }

            return cookieCollection;
        }
    }
}
